@model Product

<div class="col mb-4">
    <div class="card h-100 shadow-sm product-card position-relative" style="border-radius: 8px; transition: all 0.3s ease;">
        <div class="position-absolute" style="top: 8px; right: 8px; z-index: 100;">
            <form asp-action="Add" asp-controller="Favorites">
                <input type="hidden" name="ProductId" value="@Model.Id" />
                <button class="btn p-0" type="submit" style="background-color: white; width: 32px; height: 32px; border-radius: 50%; box-shadow: 0 2px 5px rgba(0,0,0,0.1); display: flex; align-items: center; justify-content: center; border: none;">
                    <i class="bi-heart" style="color: #f01c41; font-size: 16px;"></i>
                </button>
            </form>
        </div>

        <div style="height: 200px; padding: 16px; background-color: #fff; display: flex; align-items: center; justify-content: center;">
            <a href="/Products/Details/@Model.Id" style="display: flex; width: 100%; height: 100%; align-items: center; justify-content: center;">
                <img src="/Img/Products/@Model.Image" alt="@Model.Name"
                     style="max-width: 100%; max-height: 100%; object-fit: contain;">
            </a>
        </div>

        <div class="card-body p-3">
            <h6 class="card-title mb-2" style="font-size: 14px; font-weight: 500; height: 40px; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; color: #484848;">@Model.Name</h6>

            <div class="d-flex align-items-baseline mb-2">
                <span style="font-size: 18px; font-weight: 700; color: #000;">@Model.Price.ToString("c")</span>
            </div>

            <div id="ratingError-@Model.Id" class="alert alert-danger mb-2" style="display: none;"></div>

            <div class="d-flex mb-2 product-rating" id="rating-@Model.Id" data-product-id="@Model.Id" data-avg-rating="@Model.AvgRating.ToString("N1")">
                @for (var i = 1; i <= 5; i++)
                {
                    <a href="#" class="star-link" data-rating="@i" style="margin-right: 5px; text-decoration: none;">
                        <i class="bi @(i <= Math.Round(Model.AvgRating) ? "bi-star-fill" : "bi-star")"
                           style="color: @((i <= Math.Round(Model.AvgRating)) ? "gold" : "#ccc"); font-size: 16px;"></i>
                    </a>
                }
                <small class="ms-2 text-muted">(@Model.AvgRating.ToString("N1"))</small>
            </div>

            <div class="mt-auto">
                <form action="/Cart/Add">
                    <input type="hidden" name="ProductId" value="@Model.Id" />
                    <button class="btn w-100 mb-2" type="submit" style="background-color: #ff6000; color: white; border: none; padding: 8px; font-size: 14px; border-radius: 6px; font-weight: 600;">Sepete Ekle</button>
                    <a class="btn btn-outline-secondary w-100" href="/Products/Details/@Model.Id" style="font-size: 14px; border-radius: 6px; padding: 8px; font-weight: 500;">Ürün Detay</a>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ratingContainers = document.querySelectorAll('.product-rating');

        ratingContainers.forEach(function (container) {
            const stars = container.querySelectorAll('.star-link');
            const productId = parseInt(container.getAttribute('data-product-id'));
            const avgRating = parseFloat(container.getAttribute('data-avg-rating') || '0');
            const ratingText = container.querySelector('small');
            const errorDiv = document.getElementById(`ratingError-${productId}`);
            let canRate = true;

            updateStarsVisually(stars, Math.round(avgRating));

            stars.forEach(function (star) {
                star.addEventListener('click', function (e) {
                    e.preventDefault();

                    if (!canRate) {
                        return;
                    }
                    canRate = false;

                    const ratingValue = parseInt(this.getAttribute('data-rating'));

                    var isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
                    if (!isAuthenticated) {
                        window.location.href = '/Account/SignIn';
                        canRate = true;
                        return;
                    }

                    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (!tokenElement) {
                        console.error('Anti-forgery token not found');
                        alert('Güvenlik doğrulaması bulunamadı. Sayfayı yenileyin.');
                        canRate = true;
                        return;
                    }
                    const token = tokenElement.value;

                    fetch('/ProductRatings/AddRating', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `productId=${productId}&rating=${ratingValue}&returnUrl=${window.location.pathname + window.location.search}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateStarsVisually(stars, Math.round(data.avgRating));
                            if (ratingText) {
                                ratingText.textContent = `(${data.avgRating.toFixed(1)})`;
                            }
                            // Başarılıysa hata mesajını gizle
                            if (errorDiv) {
                                errorDiv.style.display = 'none';
                                errorDiv.textContent = '';
                            }
                        } else {
                            // Hata durumunda mesajı göster ve belirli bir süre sonra gizle
                            if (errorDiv && data.message) {
                                errorDiv.textContent = data.message;
                                errorDiv.style.display = 'block';
                                setTimeout(() => {
                                    errorDiv.style.display = 'none';
                                    errorDiv.textContent = '';
                                }, 3000); // 3 saniye sonra kaybolur
                            }
                            updateStarsVisually(stars, Math.round(avgRating));
                            if (ratingText && !data.success) {
                                ratingText.textContent = `(${avgRating.toFixed(1)})`;
                            }
                        }
                        setTimeout(() => {
                            canRate = true;
                        }, 1500);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        if (errorDiv) {
                            errorDiv.textContent = 'İşlem sırasında bir hata oluştu.';
                            errorDiv.style.display = 'block';
                            setTimeout(() => {
                                errorDiv.style.display = 'none';
                                errorDiv.textContent = '';
                            }, 3000);
                        }
                        updateStarsVisually(stars, Math.round(avgRating));
                        setTimeout(() => {
                            canRate = true;
                        }, 1500);
                    });
                });
            });
        });

        function updateStarsVisually(stars, filledCount) {
            stars.forEach(function (starLink, index) {
                const icon = starLink.querySelector('i');
                if (index < filledCount) {
                    icon.classList.remove('bi-star');
                    icon.classList.add('bi-star-fill');
                    icon.style.color = 'gold';
                } else {
                    icon.classList.remove('bi-star-fill');
                    icon.classList.add('bi-star');
                    icon.style.color = '#ccc';
                }
            });
        }
    });
</script>